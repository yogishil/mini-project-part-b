# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Bike Share project Docker build.

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements/requirements.txt ]; then pip install -r requirements/requirements.txt; fi
        if [ -f requirements/test_requirements.txt ]; then pip install -r requirements/test_requirements.txt; fi
        pip install build
    - name: Read VERSION file and set as environment variable
      run: |
       echo "VERSION=$(cat bikeshare_model/VERSION)" >> $GITHUB_ENV
       
    - name: Update GitHub Repository Variable
      run: |
          gh variable set VERSION --body "$VERSION"
      env:
          GH_TOKEN: ${{ secrets.GIT_TOKEN }}

    - name: Run training pipeline
      run: |
        python bikeshare_model/train_pipeline.py
        
    - name: Test with pytest
      run: |
        pytest
        
    - name: Build Model to generage whl file
      run: |
        python -m build
        
    - name: Login to DockerHub
      run: |
       echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_UNAME }}" --password-stdin
       
    - name: Build and push Docker image
      run: |
       docker build -t ${{ secrets.DOCKERHUB_UNAME }}/bike_sharing_api:$VERSION .
       docker push ${{ secrets.DOCKERHUB_UNAME }}/bike_sharing_api:$VERSION

    - name: Logout from the dockerhub
      run: |
       docker logout

    - name: Save variable as artifact
      run: echo $VERSION > version.txt

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: version
        path: version.txt
        
    
